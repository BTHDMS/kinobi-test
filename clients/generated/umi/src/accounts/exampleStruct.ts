/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';

export type ExampleStruct = Account<ExampleStructAccountData>;

export type ExampleStructAccountData = {
  discriminator: Uint8Array;
  data: number;
  authority: PublicKey;
};

export type ExampleStructAccountDataArgs = {
  data: number;
  authority: PublicKey;
};

export function getExampleStructAccountDataSerializer(): Serializer<
  ExampleStructAccountDataArgs,
  ExampleStructAccountData
> {
  return mapSerializer<
    ExampleStructAccountDataArgs,
    any,
    ExampleStructAccountData
  >(
    struct<ExampleStructAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['data', u32()],
        ['authority', publicKeySerializer()],
      ],
      { description: 'ExampleStructAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([201, 30, 37, 6, 94, 156, 189, 158]),
    })
  ) as Serializer<ExampleStructAccountDataArgs, ExampleStructAccountData>;
}

export function deserializeExampleStruct(
  rawAccount: RpcAccount
): ExampleStruct {
  return deserializeAccount(
    rawAccount,
    getExampleStructAccountDataSerializer()
  );
}

export async function fetchExampleStruct(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ExampleStruct> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ExampleStruct');
  return deserializeExampleStruct(maybeAccount);
}

export async function safeFetchExampleStruct(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ExampleStruct | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeExampleStruct(maybeAccount) : null;
}

export async function fetchAllExampleStruct(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ExampleStruct[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ExampleStruct');
    return deserializeExampleStruct(maybeAccount);
  });
}

export async function safeFetchAllExampleStruct(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ExampleStruct[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeExampleStruct(maybeAccount as RpcAccount)
    );
}

export function getExampleStructGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'kinobiTest',
    '3eSEGBd6d6C6imYBaeu9vDJqf4cCjxPE1JkX5TaagJCD'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      data: number;
      authority: PublicKey;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      data: [8, u32()],
      authority: [12, publicKeySerializer()],
    })
    .deserializeUsing<ExampleStruct>((account) =>
      deserializeExampleStruct(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([201, 30, 37, 6, 94, 156, 189, 158])
    );
}
