/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type ExampleStruct = {
  discriminator: ReadonlyUint8Array;
  data: number;
  authority: Address;
};

export type ExampleStructArgs = { data: number; authority: Address };

export function getExampleStructEncoder(): Encoder<ExampleStructArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['data', getU32Encoder()],
      ['authority', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([201, 30, 37, 6, 94, 156, 189, 158]),
    })
  );
}

export function getExampleStructDecoder(): Decoder<ExampleStruct> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['data', getU32Decoder()],
    ['authority', getAddressDecoder()],
  ]);
}

export function getExampleStructCodec(): Codec<
  ExampleStructArgs,
  ExampleStruct
> {
  return combineCodec(getExampleStructEncoder(), getExampleStructDecoder());
}

export function decodeExampleStruct<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ExampleStruct, TAddress>;
export function decodeExampleStruct<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ExampleStruct, TAddress>;
export function decodeExampleStruct<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ExampleStruct, TAddress> | MaybeAccount<ExampleStruct, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getExampleStructDecoder()
  );
}

export async function fetchExampleStruct<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ExampleStruct, TAddress>> {
  const maybeAccount = await fetchMaybeExampleStruct(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeExampleStruct<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ExampleStruct, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeExampleStruct(maybeAccount);
}

export async function fetchAllExampleStruct(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ExampleStruct>[]> {
  const maybeAccounts = await fetchAllMaybeExampleStruct(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeExampleStruct(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ExampleStruct>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeExampleStruct(maybeAccount));
}
